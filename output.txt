# Ansible Documentation

## wrapper playbook for kitchen testing "ansible-ssh-hardening" with default settings

This play contains the following roles:

- ../../ansible-ssh-hardening

This play runs on the following hosts:

- zufallsheld.de
- h3ld.de
- gumpri.ch

### Playbook

####  (_package_)

> **NOTE:** This task will loop over the defined list or dictionary.

**Packages**

The following packages need to be present.

- {{item}}

After applying the loop:

- openssh-clients
- openssh-server




**Details**

```json
{
  "ignore_errors": true,
  "package": "name=\"{{item}}\" state=present",
  "with_items": [
    "openssh-clients",
    "openssh-server"
  ]
}
```


####  (_apt_)

> **NOTE:** This task will loop over the defined list or dictionary.

**Packages**

The following packages need to be present.

- {{item}}

After applying the loop:

- openssh-client
- openssh-server




**Details**

```json
{
  "apt": "name=\"{{item}}\" state=present update_cache=true",
  "ignore_errors": true,
  "with_items": [
    "openssh-client",
    "openssh-server"
  ]
}
```


####  (_file_)


> **WARNING:** __file__ template is **NOT** implemented.




**Details**

```json
{
  "file": "path=\"/var/run/sshd\" state=directory"
}
```


#### create ssh host keys (_command_)


The following command will be run:

```
ssh-keygen -A
```

**Condition**

This task will only run when `not ((ansible_os_family in ['Oracle Linux', 'RedHat']) and ansible_distribution_major_version < '7')`.


**Details**

```json
{
  "command": "ssh-keygen -A",
  "name": "create ssh host keys",
  "when": "not ((ansible_os_family in [\u0027Oracle Linux\u0027, \u0027RedHat\u0027]) and ansible_distribution_major_version \u003c \u00277\u0027)"
}
```

### Role: ../../ansible-ssh-hardening

#### Set OS dependent variables (_include_vars_)

> **NOTE:** This task will loop over the defined list or dictionary.

> **WARNING:** __include_vars__ template is **NOT** implemented.




**Details**

```json
{
  "include_vars": "{{ item }}",
  "name": "Set OS dependent variables",
  "with_first_found": [
    "{{ ansible_distribution }}_{{ ansible_distribution_major_version }}.yml",
    "{{ ansible_distribution }}.yml",
    "{{ ansible_os_family }}_{{ ansible_distribution_major_version }}.yml",
    "{{ ansible_os_family }}.yml"
  ]
}
```


#### get openssh-version (_shell_)


The following command will be run:

```
ssh -V 2>&1 | sed -r 's/.*_([0-9]*\.[0-9]).*/\1/g'
```

**Register**

Task output will be saved to `sshd_version` register.



**Details**

```json
{
  "args": {
    "executable": "/bin/sh"
  },
  "changed_when": false,
  "check_mode": false,
  "name": "get openssh-version",
  "register": "sshd_version",
  "shell": "ssh -V 2\u003e\u00261 | sed -r \u0027s/.*_([0-9]*\\.[0-9]).*/\\1/g\u0027"
}
```


#### include tasks to create crypo-vars (_include_tasks_)


**Included tasks**

The following tasks-files will be included:

- crypto.yml





**Details**

```json
{
  "include_tasks": "crypto.yml",
  "name": "include tasks to create crypo-vars"
}
```


#### create revoked_keys and set permissions to root/600 (_template_)


Template `revoked_keys.j2` to `/etc/ssh/revoked_keys`.


**Condition**

This task will only run when `ssh_server_hardening`.

**Notification**

This task will notify the following handler(s):

- restart sshd

**Details**

```json
{
  "name": "create revoked_keys and set permissions to root/600",
  "notify": "restart sshd",
  "template": {
    "dest": "/etc/ssh/revoked_keys",
    "group": "{{ ssh_group }}",
    "mode": "0600",
    "owner": "{{ ssh_owner }}",
    "src": "revoked_keys.j2"
  },
  "when": "ssh_server_hardening"
}
```


#### create sshd_config and set permissions to root/600 (_template_)


Template `opensshd.conf.j2` to `/etc/ssh/sshd_config`.


**Condition**

This task will only run when `ssh_server_hardening`.

**Notification**

This task will notify the following handler(s):

- restart sshd

**Details**

```json
{
  "name": "create sshd_config and set permissions to root/600",
  "notify": "restart sshd",
  "template": {
    "dest": "/etc/ssh/sshd_config",
    "group": "{{ ssh_group }}",
    "mode": "0600",
    "owner": "{{ ssh_owner }}",
    "src": "opensshd.conf.j2",
    "validate": "/usr/sbin/sshd -T -f %s"
  },
  "when": "ssh_server_hardening"
}
```


#### create ssh_config and set permissions to root/644 (_template_)


Template `openssh.conf.j2` to `/etc/ssh/ssh_config`.


**Condition**

This task will only run when `ssh_client_hardening`.


**Details**

```json
{
  "name": "create ssh_config and set permissions to root/644",
  "template": {
    "dest": "/etc/ssh/ssh_config",
    "group": "{{ ssh_group }}",
    "mode": "0644",
    "owner": "{{ ssh_owner }}",
    "src": "openssh.conf.j2"
  },
  "when": "ssh_client_hardening"
}
```


#### Check if {{ sshd_moduli_file }} contains weak DH parameters (_shell_)


The following command will be run:

```
awk '$5 < {{ sshd_moduli_minimum }}' {{ sshd_moduli_file }}
```

**Register**

Task output will be saved to `sshd_register_moduli` register.



**Details**

```json
{
  "changed_when": false,
  "check_mode": false,
  "name": "Check if {{ sshd_moduli_file }} contains weak DH parameters",
  "register": "sshd_register_moduli",
  "shell": "awk \u0027$5 \u003c {{ sshd_moduli_minimum }}\u0027 {{ sshd_moduli_file }}"
}
```


#### remove all small primes (_shell_)


The following command will be run:

```
awk '$5 >= {{ sshd_moduli_minimum }}' {{ sshd_moduli_file }} > {{ sshd_moduli_file }}.new ; [ -r {{ sshd_moduli_file }}.new -a -s {{ sshd_moduli_file }}.new ] && mv {{ sshd_moduli_file }}.new {{ sshd_moduli_file }} || true
```


**Condition**

This task will only run when `sshd_register_moduli.stdout`.

**Notification**

This task will notify the following handler(s):

- restart sshd

**Details**

```json
{
  "name": "remove all small primes",
  "notify": "restart sshd",
  "shell": "awk \u0027$5 \u003e= {{ sshd_moduli_minimum }}\u0027 {{ sshd_moduli_file }} \u003e {{ sshd_moduli_file }}.new ; [ -r {{ sshd_moduli_file }}.new -a -s {{ sshd_moduli_file }}.new ] \u0026\u0026 mv {{ sshd_moduli_file }}.new {{ sshd_moduli_file }} || true",
  "when": "sshd_register_moduli.stdout"
}
```


#### include tasks to setup ca keys and principals (_include_tasks_)


**Included tasks**

The following tasks-files will be included:

- ca_keys_and_principals.yml



**Condition**

This task will only run when `ssh_trusted_user_ca_keys_file != ''`.


**Details**

```json
{
  "include_tasks": "ca_keys_and_principals.yml",
  "name": "include tasks to setup ca keys and principals",
  "when": "ssh_trusted_user_ca_keys_file != \u0027\u0027"
}
```


#### include tasks to setup 2FA (_include_tasks_)


**Included tasks**

The following tasks-files will be included:

- 2fa.yml



**Condition**

This task will only run when `ssh_use_pam, ssh_challengeresponseauthentication, ssh_google_auth`.


**Details**

```json
{
  "include_tasks": "2fa.yml",
  "name": "include tasks to setup 2FA",
  "when": [
    "ssh_use_pam",
    "ssh_challengeresponseauthentication",
    "ssh_google_auth"
  ]
}
```


#### test to see if selinux is installed and running (_command_)


The following command will be run:

```
getenforce
```
**Register**

Task output will be saved to `sestatus` register.



**Details**

```json
{
  "changed_when": false,
  "check_mode": false,
  "command": "getenforce",
  "failed_when": false,
  "name": "test to see if selinux is installed and running",
  "register": "sestatus"
}
```


#### include selinux specific tasks (_include_tasks_)


**Included tasks**

The following tasks-files will be included:

- selinux.yml



**Condition**

This task will only run when `sestatus.rc == 0`.


**Details**

```json
{
  "include_tasks": "selinux.yml",
  "name": "include selinux specific tasks",
  "when": "sestatus.rc == 0"
}
```


### Handlers

#### restart sshd

| Service | State | Enabled |
| ======= | ===== | ======= |
| `{{ sshd_service_name }}` | restarted |  |


